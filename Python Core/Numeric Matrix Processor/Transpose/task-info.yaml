type: edu
custom_name: stage4
files:
- name: processor/processor.py
  visible: true
  text: |
    print('Hello, world!')
  learner_created: false
- name: tests.py
  visible: false
  text: |
    import string
    from collections import namedtuple

    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    TestClue = namedtuple("TestClue", ["answer", "feedback"])


    class CalcTest(StageTest):

        def generate(self) -> List[TestCase]:
            return [
                TestCase(
                    stdin=
                    '1\n'
                    '3 3\n'
                    '3 4 55\n'
                    '4 1 1\n'
                    '9 0 0\n'
                    '3 3\n'
                    '4 9 77\n'
                    '13 22 44\n'
                    '56 57 78\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '7 13 132\n'
                        '17 23 45\n'
                        '65 57 78\n'
                        ,
                        feedback=
                        'Probably, error in the matrix adding algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '4\n'
                    '1\n'
                    '3 3\n'
                    '1 7 7\n'
                    '6 6 4\n'
                    '4 2 1\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '1 6 4\n'
                        '7 6 2\n'
                        '7 4 1\n'
                        ,
                        feedback=
                        'Probably, error in the matrix transposition algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '4\n'
                    '1\n'
                    '3 3\n'
                    '1 7 7\n'
                    '6 6 4\n'
                    '4 5 1\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '1 6 4\n'
                        '7 6 5\n'
                        '7 4 1\n'
                        ,
                        feedback=
                        'Probably, error in the matrix transposition algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '4\n'
                    '2\n'
                    '3 3\n'
                    '1 2 4\n'
                    '4 6 6\n'
                    '7 7 1\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '1 6 4\n'
                        '7 6 2\n'
                        '7 4 1\n'
                        ,
                        feedback=
                        'Probably, error in the matrix transposition algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '4\n'
                    '2\n'
                    '3 3\n'
                    '1 5 4\n'
                    '4 6 6\n'
                    '7 7 1.0\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '1 6 4\n'
                        '7 6 5\n'
                        '7 4 1\n'
                        ,
                        feedback=
                        'Probably, error in the matrix transposition algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '4\n'
                    '3\n'
                    '4 4\n'
                    '6 5 4 2\n'
                    '8 7 6 6\n'
                    '1 0 0 5.0\n'
                    '9 2 8 8\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '2 4 5 6\n'
                        '6 6 7 8\n'
                        '5 0 0 1\n'
                        '8 8 2 9\n'
                        ,
                        feedback=
                        'Probably, error in the matrix transposition algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '4\n'
                    '4\n'
                    '4 4\n'
                    '8 8 2 9\n'
                    '5 0 0 1\n'
                    '6 6 7 8.0\n'
                    '2 4 5 6\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '2 4 5 6\n'
                        '6 6 7 8\n'
                        '5 0 0 1\n'
                        '8 8 2 9\n'
                        ,
                        feedback=
                        'Probably, error in the matrix transposition algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '1\n'
                    '4 4\n'
                    '-0.3 677.4 435.2 123.33\n'
                    '1.3 141.4 0.11 1411.4\n'
                    '231.33 113.4 99.9 999.9\n'
                    '1002.22 123.44 55.66 13.3\n'
                    '4 4\n'
                    '43.43 234.22 876.6 13.2\n'
                    '-5.5 -0.3 -1.2 10.2\n'
                    '-1.0 0.8 0.8 -9.5\n'
                    '-45.5 45.5 56.5 13.7\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '43.13 911.62 1311.8 136.53\n'
                        '-4.2 141.1 -1.09 1421.6\n'
                        '230.33 114.2 100.7 990.4\n'
                        '956.72 168.94 112.16 27.0\n'
                        ,
                        feedback=
                        'Probably, error in the matrix adding algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '2\n'
                    '3 3\n'
                    '11 234 444\n'
                    '456 343 222\n'
                    '997 456 456\n'
                    '17\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '187 3978 7548\n'
                        '7752 5831 3774\n'
                        '16949 7752 7752\n'
                        ,
                        feedback=
                        'Probably, error in the matrix multiplication algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '2\n'
                    '4 4\n'
                    '10123 53455 999345 21312\n'
                    '13559 77654 231221 34534\n'
                    '12312 23412 342342 525255\n'
                    '99713 88123 123123 121111\n'
                    '111\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '1123653 5933505 110927295 2365632\n'
                        '1505049 8619594 25665531 3833274\n'
                        '1366632 2598732 37999962 58303305\n'
                        '11068143 9781653 13666653 13443321\n'
                        ,
                        feedback=
                        'Probably, error in the multiplication matrix on constant algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '3\n'
                    '4 4\n'
                    '1 2 2 7\n'
                    '3 3 4 5\n'
                    '5 0 0 1\n'
                    '0 1 0 8\n'
                    '4 4\n'
                    '9 8 7 13\n'
                    '15 14 0 1\n'
                    '3 7 2 3\n'
                    '0 9 0 35\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '45 113 11 266\n'
                        '84 139 29 229\n'
                        '45 49 35 100\n'
                        '15 86 0 281\n'
                        ,
                        feedback=
                        'Probably, error in the matrix multiplication algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '3\n'
                    '2 3\n'
                    '1 0 17\n'
                    '15 19 7\n'
                    '3 4\n'
                    '5 6 78 9\n'
                    '29 31 47 1\n'
                    '14 17 0 3\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '243 295 78 60\n'
                        '724 798 2063 175\n'
                        ,
                        feedback=
                        'Probably, error in the matrix multiplication algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '3\n'
                    '3 5\n'
                    '1 4 5 6 6\n'
                    '7 8 9 0 0\n'
                    '4 1 2 2 2\n'
                    '5 2\n'
                    '4 5\n'
                    '6 1\n'
                    '6 0\n'
                    '0 9\n'
                    '7 7\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '100 105\n'
                        '130 43\n'
                        '48 53\n'
                        ,
                        feedback=
                        'Probably, error in the matrix multiplication algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '3\n'
                    '4 4\n'
                    '0.65 0.67 76.4 23.2\n'
                    '-0.7 -13.1 -7.2 9.2\n'
                    '-0.7 -5.5 -1.5 0.4\n'
                    '-1.0 12.6 0.8 -0.4\n'
                    '4 4\n'
                    '-5.5 -0.3 -1.2 10.2\n'
                    '-1.0 0.8 0.8 -9.5\n'
                    '-45.5 45.5 56.5 13.7\n'
                    '-10.7 11.9 2.2 1.2\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '-3728.685 3752.621 4367.396 1074.785\n'
                        '246.11 -228.39 -396.2 29.71\n'
                        '73.32 -67.679 -87.43 25.04\n'
                        '-39.22 42.02 55.6 -119.42\n'
                        ,
                        feedback=
                        'Probably, error in the matrix multiplication algorithm'
                    )
                ),
                TestCase(
                    stdin=
                    '3\n'
                    '4 4\n'
                    '0.65 0.67 76.4 23.2\n'
                    '-0.7 -13.1 -7.2 9.2\n'
                    '-0.7 -5.5 -1.5 0.4\n'
                    '-1.0 12.6 0.8 -0.4\n'
                    '4 4\n'
                    '-5.5 -0.3 -1.2 10.2\n'
                    '-1.0 0.8 0.8 -9.5\n'
                    '-45.5 45.5 56.5 13.7\n'
                    '-10.7 11.9 2.2 1.2\n'
                    '3\n'
                    '3 5\n'
                    '1 4 5 6 6\n'
                    '7 8 9 0 0\n'
                    '4 1 2 2 2\n'
                    '5 2\n'
                    '4 5\n'
                    '6 1\n'
                    '6 0\n'
                    '0 9\n'
                    '7 7\n'
                    '0\n'
                    ,
                    attach=TestClue(
                        answer=
                        '-3728.685 3752.621 4367.396 1074.785\n'
                        '246.11 -228.39 -396.2 29.71\n'
                        '73.32 -67.679 -87.43 25.04\n'
                        '-39.22 42.02 55.6 -119.42\n'
                        '100 105\n'
                        '130 43\n'
                        '48 53\n'
                        ,
                        feedback=
                        'Probably, error in the operations loop'
                    )
                ),
            ]

        def is_equal_matrices(self, actual: list, expected: list) -> bool:
            if len(actual) != len(expected):
                return False
            for actual_line, expected_line in zip(actual, expected):
                if len(actual_line) != len(expected_line):
                    return False
                else:
                    for actual, expected in zip(actual_line, expected_line):
                        try:
                            if abs(float(actual) - float(expected)) > 0.01:
                                return False
                        except ValueError:
                            raise WrongAnswer("Looks like your matrix contains not only numbers!")
            return True

        def check(self, reply: str, attach) -> CheckResult:
            characters = set(string.ascii_lowercase)
            actual = [line.split() for line in reply.splitlines() if line and characters.isdisjoint(line)]
            expected = list(map(str.split, str(attach.answer).strip().split("\n")))
            return CheckResult(self.is_equal_matrices(expected, actual), attach.feedback)


    if __name__ == '__main__':
        CalcTest("processor.processor").run_tests()
  learner_created: false
- name: processor/utilities.py
  visible: true
  text: |
    import inflect

    p = inflect.engine()


    def get_matrices(n):
        matrices = []
        ordinals = [p.number_to_words(p.ordinal(ordinal)) for ordinal in range(1, n + 1) if n > 1]
        for k in range(n):
            good_input = False
            dims = []
            print(f'Enter size of {ordinals[k]} matrix:' if n > 1 else 'Enter size of matrix:', end=' ')
            while not good_input:
                dims += [int(dim) for dim in input().split()]
                if len(dims) == 2:
                    good_input = True

            good_input = False

            values = []
            print(f'Enter {ordinals[k]} matrix:' if n > 1 else 'Enter matrix:')
            while not good_input:
                values += [float(val) for val in input().split()]
                if len(values) == dims[0] * dims[1]:
                    good_input = True

            matrix = []
            for i in range(dims[0]):
                row = []
                for j in range(dims[1]):
                    row.append(values[i * dims[1] + j])
                matrix.append(row)
            matrices.append(matrix)
        return matrices


    def matrix_sum(mat_1, mat_2):
        n_1 = len(mat_1)
        m_1 = len(mat_1[0])
        n_2 = len(mat_2)
        m_2 = len(mat_2[0])
        if n_1 != n_2 or m_1 != m_2:
            return False
        else:
            result = []
            for i in range(n_1):
                row = []
                for j in range(m_1):
                    row.append(mat_1[i][j] + mat_2[i][j])
                result.append(row)
            return result


    def matrix_to_str(mat):
        result = ''
        for row in mat:
            result += ' '.join([str(val) for val in row]) + '\n'
        return result


    def scalar_multiplication(mat, scal):
        result = []
        for row in mat:
            result_row = []
            for val in row:
                result_row.append(val * scal)
            result.append(result_row)
        return result


    def matrix_multiplication(mat_1, mat_2):
        n_1 = len(mat_1)
        m_1 = len(mat_1[0])
        n_2 = len(mat_2)
        m_2 = len(mat_2[0])
        if m_1 != n_2:
            return False
        else:
            product = []
            for i in range(n_1):
                row = []
                for j in range(m_2):
                    element = 0
                    for k in range(m_1):
                        element += mat_1[i][k] * mat_2[k][j]
                    row.append(element)
                product.append(row)
            return product
  learner_created: true
feedback_link: https://hyperskill.org/projects/96/stages/531/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 24 Sep 2021 06:46:48 UTC
record: 4
